openapi: "3.0.1"
info:
  title: Things2Do
  version: 1.0.0
  description: Distributed todo application for recording tasks to be completed.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: Group
    description: Everything about your task groups
  - name: Task
    description: The actual task domain
  - name: Milestone
    description: Partial steps of a task
paths:
  /groups:
    get:
      tags:
        - Group
      summary: "Fetch all available groups"
      description: "Fetchs a list of all available groups"
      responses:
        "200":
          description: "Sucessfully fetched all available groups"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
              example:
                - id: "507f1f77bcf86cd799439011"
                  name: "Gardening"
                  description:
                    "Contains all the tasks that arise in the garden\n
                    and around the house."
    post:
      tags:
        - Group
      summary: "Creates a new group"
      description: "Creates a new group for grouping tasks"
      requestBody:
        $ref: "#/components/requestBodies/GroupCreatePayload"
      responses:
        "201":
          description: "Successfully created the new group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
              example:
                id: "507f1f77bcf86cd799439011"
                name: "Gardening"
                description: "Contains all the tasks that arise in the garden\n
                  and around the house."
        "400":
          $ref: "#/components/responses/BadRequestError"
  /groups/{groupId}:
    get:
      tags:
        - Group
      summary: "Fetch a specific group"
      description: "Fetch information about a specific group"
      parameters:
        - name: "groupId"
          in: "path"
          description: "Unique identifier of the group"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "Sucessfully fetched the requested group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
              example:
                id: "507f1f77bcf86cd799439011"
                name: "Gardening"
                description: "Contains all the tasks that arise in the garden\n
                  and around the house."
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Group
      summary: "Update a specific group"
      description: "Update fields of a specific group"
      parameters:
        - name: "groupId"
          in: "path"
          description: "Unique identifier of the group"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        $ref: "#/components/requestBodies/GroupUpdatePayload"
      responses:
        "200":
          description: "Sucessfully updated the requested group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
              example:
                id: "507f1f77bcf86cd799439011"
                name: "Gardening and design"
                description: "Contains all the tasks that arise in the garden\n
                  and around the house."
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Group
      summary: "Delete a specific group"
      description: "Delete a specific group"
      parameters:
        - name: "groupId"
          in: "path"
          description: "Unique identifier of the group"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f1f77bcf86cd799439011"
      responses:
        "204":
          description: "Sucessfully deleted the requested group"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /groups/{groupId}/tasks:
    get:
      tags:
        - Task
      summary: "Fetch all available tasks of a given group"
      description: "Fetchs a list of all available tasks of a given group"
      parameters:
        - name: "groupId"
          in: "path"
          description: "Unique identifier of the group"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f1f77bcf86cd799439011"
      responses:
        "200":
          description: "Sucessfully fetched all available tasks"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
              example:
                - id: "507f191e810c19729de860ea"
                  name: "Shoveling snow"
                  description: "Snow needs to be shoveled in the driveway and\n
                    backyard."
                  priority: 6
                  groupId: "507f1f77bcf86cd799439011"
                  expiresAt: "2019-09-07T-15:50+00"
                  finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Task
      summary: "Creates a new task in a given group"
      description: "Creates a new task in a given group"
      parameters:
        - name: "groupId"
          in: "path"
          description: "Unique identifier of the group"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f1f77bcf86cd799439011"
      requestBody:
        $ref: "#/components/requestBodies/TaskCreatePayload"
      responses:
        "201":
          description: "Successfully created the new task"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: "507f191e810c19729de860ea"
                name: "Shoveling snow"
                description: "Snow needs to be shoveled in the driveway and\n
                  backyard."
                priority: 6
                groupId: "507f1f77bcf86cd799439011"
                expiresAt: "2019-09-07T-15:50+00"
                finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /tasks/{taskId}:
    get:
      tags:
        - Task
      summary: "Fetch a specific task"
      description: "Fetch information about a specific task"
      parameters:
        - name: "taskId"
          in: "path"
          description: "Unique identifier of the task"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f191e810c19729de860ea"
      responses:
        "200":
          description: "Sucessfully fetched the requested task"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: "507f191e810c19729de860ea"
                name: "Shoveling snow"
                description: "Snow needs to be shoveled in the driveway and\n
                  backyard."
                priority: 6
                groupId: "507f1f77bcf86cd799439011"
                expiresAt: "2019-09-07T-15:50+00"
                finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Task
      summary: "Update a specific task"
      description: "Update fields of a specific task"
      parameters:
        - name: "taskId"
          in: "path"
          description: "Unique identifier of the task"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f191e810c19729de860ea"
      requestBody:
        $ref: "#/components/requestBodies/TaskUpdatePayload"
      responses:
        "200":
          description: "Sucessfully updated the requested task"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              example:
                id: "507f191e810c19729de860ea"
                name: "Shoveling snow"
                description: "Snow needs to be shoveled in the driveway and\n
                  backyard."
                priority: 8
                groupId: "507f1f77bcf86cd799439011"
                expiresAt: "2019-09-07T-15:50+00"
                finished: true
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Task
      summary: "Delete a specific task"
      description: "Delete a specific task"
      parameters:
        - name: "taskId"
          in: "path"
          description: "Unique identifier of the task"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f191e810c19729de860ea"
      responses:
        "204":
          description: "Sucessfully deleted the requested task"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /tasks/{taskId}/milestones:
    get:
      tags:
        - Milestone
      summary: "Fetch all available milestones of a given task"
      description: "Fetchs a list of all available milestones of a given task"
      parameters:
        - name: "taskId"
          in: "path"
          description: "Unique identifier of the task"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f191e810c19729de860ea"
      responses:
        "200":
          description: "Sucessfully fetched all available milestones"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Milestone"
              example:
                - id: "00000020f51bb4362eee2a4d"
                  name: "Shovel snow in front of the front door"
                  finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Milestone
      summary: "Creates a new milestone in a given task"
      description: "Creates a new milestone in a given task"
      parameters:
        - name: "taskId"
          in: "path"
          description: "Unique identifier of the task"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "507f191e810c19729de860ea"
      requestBody:
        $ref: "#/components/requestBodies/MilestoneCreatePayload"
      responses:
        "201":
          description: "Successfully created the new milestone"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Milestone"
              example:
                id: "00000020f51bb4362eee2a4d"
                name: "Shovel snow in front of the front door"
                finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /milestones/{milestoneId}:
    get:
      tags:
        - Milestone
      summary: "Fetch a specific milestone"
      description: "Fetch information about a specific milestone"
      parameters:
        - name: "milestoneId"
          in: "path"
          description: "Unique identifier of the milestone"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "00000020f51bb4362eee2a4d"
      responses:
        "200":
          description: "Sucessfully fetched the requested milestone"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Milestone"
              example:
                id: "00000020f51bb4362eee2a4d"
                name: "Shovel snow in front of the front door"
                finished: false
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Milestone
      summary: "Update a specific milestone"
      description: "Update fields of a specific milestone"
      parameters:
        - name: "milestoneId"
          in: "path"
          description: "Unique identifier of the milestone"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "00000020f51bb4362eee2a4d"
      requestBody:
        $ref: "#/components/requestBodies/MilestoneUpdatePayload"
      responses:
        "200":
          description: "Sucessfully updated the requested milestone"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Milestone"
              example:
                id: "00000020f51bb4362eee2a4d"
                name: "Shovel snow in front of the front door"
                finished: true
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Milestone
      summary: "Delete a specific milestone"
      description: "Delete a specific milestone"
      parameters:
        - name: "milestoneId"
          in: "path"
          description: "Unique identifier of the milestone"
          required: true
          schema:
            type: "string"
            format: "id"
            example: "00000020f51bb4362eee2a4d"
      responses:
        "204":
          description: "Sucessfully deleted the requested milestone"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "404":
          $ref: "#/components/responses/NotFoundError"
components:
  schemas:
    Error:
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
      required:
        - code
        - message
    Group:
      type: "object"
      properties:
        id:
          type: "string"
          format: "id"
        name:
          type: "string"
          maxLength: 200
        description:
          type: "string"
          maxLength: 2000
      required:
        - id
        - name
    Task:
      type: "object"
      properties:
        id:
          type: "string"
          format: "id"
        name:
          type: "string"
          maxLength: 200
        description:
          type: "string"
          maxLength: 2000
        groupId:
          type: "string"
          format: "id"
        finished:
          type: "boolean"
        priority:
          type: "integer"
          minimum: 1
          maximum: 10
        expiresAt:
          type: "string"
          format: "date-time"
      required:
        - id
        - name
        - groupId
        - finished
    Milestone:
      type: "object"
      properties:
        id:
          type: "string"
          format: "id"
        name:
          type: "string"
          maxLength: 200
        description:
          type: "string"
          maxLength: 2000
        taskId:
          type: "string"
          format: "id"
        finished:
          type: "boolean"
      required:
        - id
        - name
        - taskId
        - finished
  requestBodies:
    GroupCreatePayload:
      description: "Fields of new group to add"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
            required:
              - name
          example:
            name: "Gardening"
            description: "Contains all the tasks that arise in the garden\n
              and around the house."
    GroupUpdatePayload:
      description: "Fields of new group to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
          example:
            name: "Gardening and design"
    TaskCreatePayload:
      description: "Fields of new task to add"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
              priority:
                type: "integer"
                minimum: 1
                maximum: 10
              expiresAt:
                type: "string"
                format: "date-time"
            required:
              - name
          example:
            name: "Shoveling snow"
            description: "Snow needs to be shoveled in the driveway and backyard."
            priority: 6
            expiresAt: "2019-09-07T-15:50+00"
    TaskUpdatePayload:
      description: "Fields of new task to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
              finished:
                type: "boolean"
              priority:
                type: "integer"
                minimum: 1
                maximum: 10
              expiresAt:
                type: "string"
                format: "date-time"
          example:
            priority: 8
            finished: true
    MilestoneCreatePayload:
      description: "Fields of new milestone to add"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
            required:
              - name
          example:
            name: "Shovel snow in front of the front door"
    MilestoneUpdatePayload:
      description: "Fields of new milestone to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                maxLength: 200
              description:
                type: "string"
                maxLength: 2000
              finished:
                type: "boolean"
          example:
            finished: true
  responses:
    InternalServerError:
      description: "Is sent in the event of server-internal errors."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequestError:
      description: "Used when the client provides incorrect information in the\n
        request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: "Used when a resource could not be found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
